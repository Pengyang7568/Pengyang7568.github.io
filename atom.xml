<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fabrice</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-04T13:31:14.603Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fabrice</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>json-server</title>
    <link href="http://yoursite.com/2017/06/04/json-server/"/>
    <id>http://yoursite.com/2017/06/04/json-server/</id>
    <published>2017-06-04T13:17:45.000Z</published>
    <updated>2017-06-04T13:31:14.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json-server初次使用"><a href="#json-server初次使用" class="headerlink" title="json-server初次使用"></a><a href="https://github.com/typicode/json-server" target="_blank" rel="external">json-server</a>初次使用</h2><hr>
<div class="note success"><p>在vue-cli脚手架工具中使用<strong>json-server</strong>,自建测试用的<strong>REST API</strong>,实现ajax请求的测试</p>
</div>
<hr>
<blockquote>
<p>安装json-server</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i json-server --save --dev</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>设置dev-server.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入json-server模块</span></div><div class="line"><span class="keyword">var</span> jsonServer= <span class="built_in">require</span>(<span class="string">'json-server'</span>)</div><div class="line"><span class="comment">//实例化</span></div><div class="line"><span class="keyword">const</span> apiServer = jsonServer.create()</div><div class="line"><span class="comment">//设置json-server的router为db.json(在当前项目的根目录下创建db.json文件)</span></div><div class="line"><span class="keyword">const</span> apiRouter = jsonServer.router(<span class="string">'db.json'</span>)</div><div class="line"><span class="comment">//json-server中间件</span></div><div class="line"><span class="keyword">const</span> middlewares = jsonServer.defaults()</div><div class="line"><span class="comment">//使用所设定的配置</span></div><div class="line">apiServer.use(middlewares)</div><div class="line"><span class="comment">//通过/api/数据接口来请求数据</span></div><div class="line">apiServer.use(<span class="string">'/api'</span>,apiRouter)</div><div class="line"><span class="comment">//json-server监听8081</span></div><div class="line">apiServer.listen(<span class="number">8081</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'JSON Server is running'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>config/index.js 的代理设置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dev: &#123;</div><div class="line"> <span class="comment">//在当前项目的hot-reload服务器下访问/api/getuserData均会跳转到8081端口</span></div><div class="line"> proxyTable: &#123;</div><div class="line">  <span class="string">'/api/'</span>: <span class="string">'httphttp://localhost:8081/'</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>db.json</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//db.json文件按以下格式书写ajax请求所需数据</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"getNewsList"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"title"</span>: <span class="string">"newsone"</span>,</div><div class="line">      <span class="string">"url"</span>: <span class="string">"http://overwatch.com"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"title"</span>: <span class="string">"newstwo"</span>,</div><div class="line">      <span class="string">"url"</span>: <span class="string">"http://overwatch.com"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"title"</span>: <span class="string">"newsthree"</span>,</div><div class="line">      <span class="string">"url"</span>: <span class="string">"http://overwatch.com"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line"></div><div class="line">  ......</div><div class="line"></div><div class="line">  <span class="string">"api"</span>: data</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>*.vue</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$http.get(<span class="string">'api/getNewsList'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="keyword">this</span>.newlist= res.data&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span>&#123; <span class="built_in">console</span>.log(err)&#125; )</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;json-server初次使用&quot;&gt;&lt;a href=&quot;#json-server初次使用&quot; class=&quot;headerlink&quot; title=&quot;json-server初次使用&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/typicode/json
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>css基础知识（一）</title>
    <link href="http://yoursite.com/2017/06/02/css%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/06/02/css基础知识（一）/</id>
    <published>2017-06-02T06:30:47.000Z</published>
    <updated>2017-06-02T11:09:35.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="视觉格式化模型"><a href="#视觉格式化模型" class="headerlink" title="视觉格式化模型"></a>视觉格式化模型</h2><blockquote>
<p>视觉格式化模型（visual formatting model)是用来处理文档并将其显示在视觉媒体上的机制<br>视觉格式化模型定义了盒（Box）的生成，盒主要包括了块盒、行内盒、匿名盒（没有名字不能被选择器选中的盒）以及一些实验性的盒（未来可能添加到规范中）</p>
</blockquote>
<h2 id="盒（box）"><a href="#盒（box）" class="headerlink" title="盒（box）"></a>盒（box）</h2><ul>
<li>box是css布局的基本单位，元素的类型(<code>a</code> <code>div</code>…)和display属性决定了这个元素的box类型.</li>
<li>box的类型分为<ul>
<li><code>block-level box</code>：<code>display</code>的属性值为<code>block</code> <code>list-item</code> <code>table</code>的元素会生成block-level box，并且参与block formatting context布局.</li>
<li><code>inline-level box</code>：<code>display</code>的属性值为<code>inline</code> <code>inline-block</code> <code>inline-table</code>的元素会生成inline-level box，并参与inline formatting context布局.</li>
<li><code>run-in box</code>: css3中新定义的</li>
</ul>
</li>
</ul>
<h2 id="格式上下文（Formatting-Context）"><a href="#格式上下文（Formatting-Context）" class="headerlink" title="格式上下文（Formatting Context）"></a>格式上下文（Formatting Context）</h2><ul>
<li>formatting context 是一个决定如何渲染文档的容器</li>
<li>常见的formatting context：<ul>
<li>block formatting context (BFC)</li>
<li>inline formatting context (IFC)</li>
<li>Grid formatting context (GFC)</li>
<li>flex formatting context (FFC)</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;视觉格式化模型&quot;&gt;&lt;a href=&quot;#视觉格式化模型&quot; class=&quot;headerlink&quot; title=&quot;视觉格式化模型&quot;&gt;&lt;/a&gt;视觉格式化模型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;视觉格式化模型（visual formatting model)是用来处理
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>hexo+Github pages</title>
    <link href="http://yoursite.com/2017/06/01/hexo-Github-pages/"/>
    <id>http://yoursite.com/2017/06/01/hexo-Github-pages/</id>
    <published>2017-06-01T10:50:24.000Z</published>
    <updated>2017-06-04T13:27:26.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-Github-pages"><a href="#Hexo-Github-pages" class="headerlink" title="Hexo + Github pages"></a>Hexo + Github pages</h2><hr>
<blockquote>
<p>安装hexo</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ cd d:/hexo</div><div class="line">//随便那个建个hexo文件夹</div><div class="line">$ npm install hexo-cli -g  </div><div class="line">//hexo-cli脚手架工作</div><div class="line">$ hexo init blog  </div><div class="line">//初始化blog项目</div><div class="line">$ cd blog</div><div class="line">$ npm install</div><div class="line">//安装相关依赖 有可能全都默认装好了</div><div class="line">$ hexo g</div><div class="line">// 或者hexo generate 生成静态文件 public</div><div class="line">$ hexo s</div><div class="line">// 或者hexo server，可以在http://localhost:4000/ 查看默认效果</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>新增</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;postName&quot; #新建文章</div></pre></td></tr></table></figure>
<p>然后在blog目录下找到source/_posts/postname.md，编辑器（支持markdown的编辑器）打开这个文件<br>默认格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: hello hexo</div><div class="line">date: 2017-06-01 14:14:38</div><div class="line">tags:</div><div class="line">---</div><div class="line">内容</div><div class="line">## title</div><div class="line">.....</div></pre></td></tr></table></figure></p>
<p><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">markdown</a>语法书写</p>
<hr>
<blockquote>
<p>主题安装</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">//这个命令是删掉之前生成的public文件夹</div><div class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div><div class="line">//https://github.com/litten/hexo-theme-yilia.git 主题的仓库地址</div><div class="line">//themes/yilia 在blog目录下以themes/主题名格式生成文件夹</div><div class="line"></div><div class="line">//应用主题去blog根目录下_config.yml文件去理改，下面这个字段</div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: apollo</div><div class="line">//一般不用更新主题，clone过来一般都是最新的，要更新就cd 主题文件夹</div><div class="line">$ git pull</div><div class="line">//主题的选项和修改，自己看人Github仓库的文档</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>Github pages</p>
</blockquote>
<hr>
<p><img src="http://oqwtih17f.bkt.clouddn.com/Githubpages.png" alt="Githubpages"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://oqwtih17f.bkt.clouddn.com/Githubpages1.png" alt="Githubpages"></h2><p>上面就是你的Github账户下创建个仓库，名字必须按格式username.github.io写</p>
<hr>
<blockquote>
<p>部署</p>
</blockquote>
<p>  在_config.yml文件的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/Pengyang7568/Pengyang7568.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p> repository这个是你的仓库地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line">//部署的插件</div></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p><img src="http://oqwtih17f.bkt.clouddn.com/v2-afc855fbbb24c435dde04ae2bce57711_b.png" alt="正确上传效果就是这样"></p>
<p>  正确上传效果就是上面，最好是下个Github的客服端，没有客服端会在命令行让你输账户，密码，有客服端会弹个窗口输入，上传成功后，你就可以访问Pengyang7568.github.io前面换成你的用户名就可以</p>
<hr>
<blockquote>
<p>新文章发表</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line"></div><div class="line">$ hexo new &quot;文章名字&quot;</div><div class="line"></div><div class="line">$ hexo g</div><div class="line"></div><div class="line">$ hexo s //本地看看效果</div><div class="line"></div><div class="line">$ hexo d //部署上去</div></pre></td></tr></table></figure>
<p>然后就访问地址就可以看到了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo-Github-pages&quot;&gt;&lt;a href=&quot;#Hexo-Github-pages&quot; class=&quot;headerlink&quot; title=&quot;Hexo + Github pages&quot;&gt;&lt;/a&gt;Hexo + Github pages&lt;/h2&gt;&lt;hr&gt;
&lt;blo
    
    </summary>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
</feed>
